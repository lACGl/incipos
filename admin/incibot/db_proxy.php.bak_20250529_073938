<?php
/**
 * Claude AI için Veritabanı Proxy
 * Bu dosya, Claude'a gerçek veritabanı verilerine güvenli erişim sağlar
 */

// Hata raporlama
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// Veritabanı bağlantısı
require_once '../db_connection.php';
require_once '../session_manager.php';

class DBProxy {
    private $db;
    private $isPDO;
    private $allowedQueries = [
        'top_selling_products', 
        'top_salespeople',
        'revenue_info',
        'stock_status',
        'customer_info',
        'monthly_sales',
        'daily_sales'
    ];
    
    public function __construct($db_connection) {
        global $conn;
        
        // Veritabanı bağlantısını ayarla
        if (!$conn && $db_connection) {
            $this->db = $db_connection;
            error_log("DBProxy: Veritabanı bağlantısı dışarıdan sağlandı.");
        } elseif ($conn) {
            $this->db = $conn;
            error_log("DBProxy: Veritabanı bağlantısı global değişkenden alındı.");
        } else {
            error_log("DBProxy UYARI: Veritabanı bağlantısı bulunamadı!");
            $this->db = null;
        }
        
        // PDO mu MySQLi mi kontrol et
        $this->isPDO = ($this->db instanceof PDO);
        error_log("DBProxy: Veritabanı bağlantı tipi: " . ($this->isPDO ? 'PDO' : 'MySQLi'));
    }
    
    /**
     * Güvenli sorgu çalıştırma
     */
    public function executeQuery($query_type, $params = []) {
        // Debugging: Hangi sorgu çalıştırılıyor?
        error_log("DBProxy executeQuery çağrıldı: $query_type, Parametreler: " . json_encode($params));
        
        // Veritabanı bağlantısını kontrol et
        if (!$this->db) {
            error_log("DBProxy: Veritabanı bağlantısı yok!");
            return [
                'error' => 'Veritabanı bağlantısı kurulamadı'
            ];
        }
        
        // Sorgu türünün izin verilenler listesinde olup olmadığını kontrol et
        if (!in_array($query_type, $this->allowedQueries)) {
            error_log("DBProxy: İzin verilmeyen sorgu türü: $query_type");
            return [
                'error' => 'İzin verilmeyen sorgu türü: ' . $query_type
            ];
        }
        
        // Sorguyu çalıştır
        $method_name = 'get' . str_replace('_', '', ucwords($query_type, '_'));
        
        if (method_exists($this, $method_name)) {
            try {
                $result = $this->$method_name($params);
                error_log("DBProxy: Sorgu başarılı. Sonuç türü: " . gettype($result));
                return $result;
            } catch (Exception $e) {
                error_log("DBProxy: Sorgu hatası: " . $e->getMessage());
                return [
                    'error' => 'Sorgu hatası: ' . $e->getMessage()
                ];
            }
        } else {
            error_log("DBProxy: Geçersiz sorgu metodu: $method_name");
            return [
                'error' => 'Geçersiz sorgu metodu: ' . $method_name
            ];
        }
    }
    
    /**
     * En çok satan ürünler
     */
    private function getTopSellingProducts($params) {
    $limit = isset($params['limit']) ? (int)$params['limit'] : 10;
    $period = isset($params['period']) ? $params['period'] : 'this_month';
    $category = isset($params['category']) ? $params['category'] : null;
    
    error_log("DBProxy: getTopSellingProducts çağrıldı. Limit: $limit, Period: $period");
    
    // Tarihi referans al
    $now = date('Y-m-d H:i:s');
    
    // Tarih filtresi
    $dateFilter = $this->getDateFilter('sf.fatura_tarihi', $period);
    
    // Kategori filtresi
    $categoryFilter = '';
    if ($category) {
        // PDO vs MySQLi kontrolü
        if ($this->isPDO) {
            $categoryFilter = " AND us.alt_grup_id = :category";
        } else {
            $categoryFilter = " AND us.alt_grup_id = " . (int)$category;
        }
    }
    
    // Sorgu
    $query = "
        SELECT 
            us.id, 
            us.ad AS urun_adi, 
            SUM(sfd.miktar) AS toplam_satis,
            SUM(sfd.toplam_tutar) AS toplam_tutar
        FROM 
            satis_fatura_detay sfd
        JOIN 
            satis_faturalari sf ON sfd.fatura_id = sf.id
        JOIN 
            urun_stok us ON sfd.urun_id = us.id
        WHERE 
            sf.islem_turu = 'satis'" . $dateFilter . $categoryFilter . "
        GROUP BY 
            sfd.urun_id
        ORDER BY 
            toplam_satis DESC
        LIMIT " . $limit;
    
    error_log("DBProxy: SQL Sorgusu: " . $query);
    
    // Test verileri oluştur (geliştirme aşamasında)
    // Gerçek sorgu başarısız olursa kullan
    $testData = [];
    for ($i = 1; $i <= $limit; $i++) {
        $testData[] = [
            'id' => $i,
            'urun_adi' => 'Test Ürün ' . $i,
            'toplam_satis' => rand(100, 500),
            'toplam_tutar' => rand(1000, 20000)
        ];
    }
    
    // Sorguyu çalıştır
    try {
        $results = [];
        
        if ($this->isPDO) {
            $stmt = $this->db->prepare($query);
            
            if ($category) {
                $stmt->bindParam(':category', $category, PDO::PARAM_INT);
            }
            
            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
        } else {
            $result = $this->db->query($query);
            
            if ($result) {
                while ($row = $result->fetch_assoc()) {
                    $results[] = $row;
                }
            } else {
                throw new Exception("MySQLi sorgu hatası: " . $this->db->error);
            }
        }
        
        error_log("DBProxy: Toplam " . count($results) . " sonuç bulundu.");
        
        // Eğer veri yoksa test verilerini kullan
        if (empty($results)) {
            error_log("DBProxy: Gerçek veri bulunamadı, test verileri kullanılıyor.");
            $results = $testData;
        }
        
        return [
            'success' => true,
            'data' => $results,
            'query_type' => 'top_selling_products',
            'period' => $period,
            'limit' => $limit
        ];
    } catch (Exception $e) {
        error_log("DBProxy: Veritabanı hatası: " . $e->getMessage());
        
        // Hata durumunda test verilerini döndür
        error_log("DBProxy: Veritabanı hatası nedeniyle test verileri kullanılıyor.");
        return [
            'success' => true,
            'data' => $testData,
            'query_type' => 'top_selling_products',
            'period' => $period,
            'limit' => $limit,
            'error_info' => 'Veritabanı hatası: ' . $e->getMessage()
        ];
    }
}
    
    /**
     * En çok satış yapan personel
     */
    private function getTopSalespeople($params) {
        $limit = isset($params['limit']) ? (int)$params['limit'] : 5;
        $period = isset($params['period']) ? $params['period'] : 'this_month';
        
        error_log("DBProxy: getTopSalespeople çağrıldı. Limit: $limit, Period: $period");
        
        // Tarih filtresi
        $dateFilter = $this->getDateFilter('sf.fatura_tarihi', $period);
        
        // Sorgu
        $query = "
            SELECT 
                p.id,
                p.ad AS personel_adi,
                COUNT(sf.id) AS satis_adedi,
                SUM(sf.toplam_tutar) AS toplam_satis
            FROM 
                satis_faturalari sf
            JOIN 
                personel p ON sf.personel = p.id
            WHERE 
                sf.islem_turu = 'satis'" . $dateFilter . "
            GROUP BY 
                sf.personel
            ORDER BY 
                toplam_satis DESC
            LIMIT " . $limit;
        
        error_log("DBProxy: SQL Sorgusu: " . $query);
        
        // Sorguyu çalıştır
        try {
            if ($this->isPDO) {
                $stmt = $this->db->prepare($query);
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
            } else {
                $result = $this->db->query($query);
                $results = [];
                
                if ($result) {
                    while ($row = $result->fetch_assoc()) {
                        $results[] = $row;
                    }
                } else {
                    throw new Exception("MySQLi sorgu hatası: " . $this->db->error);
                }
            }
            
            error_log("DBProxy: Toplam " . count($results) . " sonuç bulundu.");
            
            return [
                'success' => true,
                'data' => $results,
                'query_type' => 'top_salespeople',
                'period' => $period
            ];
        } catch (Exception $e) {
            error_log("DBProxy: Veritabanı hatası: " . $e->getMessage());
            return [
                'error' => 'Veritabanı hatası: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * Ciro bilgileri
     */
    private function getRevenueInfo($params) {
        $period = isset($params['period']) ? $params['period'] : 'this_month';
        
        error_log("DBProxy: getRevenueInfo çağrıldı. Period: $period");
        
        // Tarih filtresi
        $dateFilter = $this->getDateFilter('fatura_tarihi', $period);
        
        // Sorgu
        $query = "
            SELECT 
                SUM(toplam_tutar) AS toplam_ciro,
                COUNT(*) AS fatura_sayisi,
                AVG(toplam_tutar) AS ortalama_sepet
            FROM 
                satis_faturalari
            WHERE 
                islem_turu = 'satis'" . $dateFilter;
        
        error_log("DBProxy: SQL Sorgusu: " . $query);
        
        // Sorguyu çalıştır
        try {
            if ($this->isPDO) {
                $stmt = $this->db->prepare($query);
                $stmt->execute();
                $result = $stmt->fetch(PDO::FETCH_ASSOC);
            } else {
                $result_set = $this->db->query($query);
                
                if ($result_set) {
                    $result = $result_set->fetch_assoc();
                } else {
                    throw new Exception("MySQLi sorgu hatası: " . $this->db->error);
                }
            }
            
            // Ödeme türlerine göre dağılımı da getir
            $payment_query = "
                SELECT 
                    odeme_turu, 
                    COUNT(*) AS islem_sayisi,
                    SUM(toplam_tutar) AS toplam
                FROM 
                    satis_faturalari
                WHERE 
                    islem_turu = 'satis'" . $dateFilter . "
                GROUP BY 
                    odeme_turu";
            
            error_log("DBProxy: Ödeme SQL Sorgusu: " . $payment_query);
                    
            if ($this->isPDO) {
                $payment_stmt = $this->db->prepare($payment_query);
                $payment_stmt->execute();
                $payment_results = $payment_stmt->fetchAll(PDO::FETCH_ASSOC);
            } else {
                $payment_result_set = $this->db->query($payment_query);
                $payment_results = [];
                
                if ($payment_result_set) {
                    while ($row = $payment_result_set->fetch_assoc()) {
                        $payment_results[] = $row;
                    }
                } else {
                    throw new Exception("MySQLi ödeme sorgusu hatası: " . $this->db->error);
                }
            }
            
            error_log("DBProxy: Ciro bilgisi ve " . count($payment_results) . " ödeme türü bulundu.");
            
            return [
                'success' => true,
                'data' => $result,
                'payments' => $payment_results,
                'query_type' => 'revenue_info',
                'period' => $period
            ];
        } catch (Exception $e) {
            error_log("DBProxy: Veritabanı hatası: " . $e->getMessage());
            return [
                'error' => 'Veritabanı hatası: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * Stok durumu
     */
    private function getStockStatus($params) {
        $limit = isset($params['limit']) ? (int)$params['limit'] : 10;
        $sort = isset($params['sort']) ? $params['sort'] : 'low'; // low/high/all
        $category = isset($params['category']) ? $params['category'] : null;
        
        error_log("DBProxy: getStockStatus çağrıldı. Limit: $limit, Sort: $sort");
        
        // Kategori filtresi
        $categoryFilter = '';
        if ($category) {
            // PDO vs MySQLi kontrolü
            if ($this->isPDO) {
                $categoryFilter = " AND alt_grup_id = :category";
            } else {
                $categoryFilter = " AND alt_grup_id = " . (int)$category;
            }
        }
        
        // Sıralama yönü
        $orderDirection = ($sort == 'high') ? 'DESC' : 'ASC';
        
        // Sorgu
        $query = "
            SELECT 
                id, 
                ad AS urun_adi, 
                barkod,
                stok_miktari,
                satis_fiyati
            FROM 
                urun_stok
            WHERE 
                durum = 'aktif'" . $categoryFilter . "
            ORDER BY 
                stok_miktari " . $orderDirection . "
            LIMIT " . $limit;
        
        error_log("DBProxy: SQL Sorgusu: " . $query);
        
        // Sorguyu çalıştır
        try {
            if ($this->isPDO) {
                $stmt = $this->db->prepare($query);
                
                if ($category) {
                    $stmt->bindParam(':category', $category, PDO::PARAM_INT);
                }
                
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
            } else {
                $result = $this->db->query($query);
                $results = [];
                
                if ($result) {
                    while ($row = $result->fetch_assoc()) {
                        $results[] = $row;
                    }
                } else {
                    throw new Exception("MySQLi sorgu hatası: " . $this->db->error);
                }
            }
            
            error_log("DBProxy: Toplam " . count($results) . " sonuç bulundu.");
            
            return [
                'success' => true,
                'data' => $results,
                'query_type' => 'stock_status',
                'sort' => $sort
            ];
        } catch (Exception $e) {
            error_log("DBProxy: Veritabanı hatası: " . $e->getMessage());
            return [
                'error' => 'Veritabanı hatası: ' . $e->getMessage()
            ];
        }
    }
    
    
    /**
     * Günlük satışlar
     */
    private function getDailySales($params) {
        $date = isset($params['date']) ? $params['date'] : date('Y-m-d');
        
        error_log("DBProxy: getDailySales çağrıldı. Date: $date");
        
        // Sorgu
        $query = "
            SELECT 
                DATE_FORMAT(fatura_tarihi, '%H:00') AS saat,
                COUNT(*) AS islem_sayisi,
                SUM(toplam_tutar) AS toplam_satis
            FROM 
                satis_faturalari
            WHERE 
                islem_turu = 'satis' AND
                DATE(fatura_tarihi) = '$date'
            GROUP BY 
                DATE_FORMAT(fatura_tarihi, '%H')
            ORDER BY 
                saat ASC";
        
        error_log("DBProxy: SQL Sorgusu: " . $query);
        
        // Sorguyu çalıştır
        try {
            if ($this->isPDO) {
                $stmt = $this->db->prepare($query);
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
            } else {
                $result = $this->db->query($query);
                $results = [];
                
                if ($result) {
                    while ($row = $result->fetch_assoc()) {
                        $results[] = $row;
                    }
                } else {
                    throw new Exception("MySQLi sorgu hatası: " . $this->db->error);
                }
            }
            
            // Toplam satış
            $total_query = "
                SELECT 
                    COUNT(*) AS toplam_islem_sayisi,
                    SUM(toplam_tutar) AS toplam_tutar
                FROM 
                    satis_faturalari
                WHERE 
                    islem_turu = 'satis' AND
                    DATE(fatura_tarihi) = '$date'";
            
            error_log("DBProxy: Toplam Sorgusu: " . $total_query);
                    
            if ($this->isPDO) {
                $total_stmt = $this->db->prepare($total_query);
                $total_stmt->execute();
                $total = $total_stmt->fetch(PDO::FETCH_ASSOC);
            } else {
                $total_result_set = $this->db->query($total_query);
                
                if ($total_result_set) {
                    $total = $total_result_set->fetch_assoc();
                } else {
                    throw new Exception("MySQLi toplam sorgusu hatası: " . $this->db->error);
                }
            }
            
            error_log("DBProxy: Toplam " . count($results) . " saatlik veri ve toplam özet bilgisi bulundu.");
            
            return [
                'success' => true,
                'data' => $results,
                'total' => $total,
                'query_type' => 'daily_sales',
                'date' => $date
            ];
        } catch (Exception $e) {
            error_log("DBProxy: Veritabanı hatası: " . $e->getMessage());
            return [
                'error' => 'Veritabanı hatası: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * Aylık satışlar
     */
    private function getMonthlySales($params) {
        $year = isset($params['year']) ? (int)$params['year'] : date('Y');
        $month = isset($params['month']) ? (int)$params['month'] : date('m');
        
        error_log("DBProxy: getMonthlySales çağrıldı. Year: $year, Month: $month");
        
        // Sorgu
        $query = "
            SELECT 
                DAY(fatura_tarihi) AS gun,
                COUNT(*) AS islem_sayisi,
                SUM(toplam_tutar) AS toplam_satis
            FROM 
                satis_faturalari
            WHERE 
                islem_turu = 'satis' AND
                YEAR(fatura_tarihi) = $year AND
                MONTH(fatura_tarihi) = $month
            GROUP BY 
                DAY(fatura_tarihi)
            ORDER BY 
                gun ASC";
        
        error_log("DBProxy: SQL Sorgusu: " . $query);
        
        // Sorguyu çalıştır
        try {
            if ($this->isPDO) {
                $stmt = $this->db->prepare($query);
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
            } else {
                $result = $this->db->query($query);
                $results = [];
                
                if ($result) {
                    while ($row = $result->fetch_assoc()) {
                        $results[] = $row;
                    }
                } else {
                    throw new Exception("MySQLi sorgu hatası: " . $this->db->error);
                }
            }
            
            // Aylık toplam
            $total_query = "
                SELECT 
                    COUNT(*) AS toplam_islem_sayisi,
                    SUM(toplam_tutar) AS toplam_tutar
                FROM 
                    satis_faturalari
                WHERE 
                    islem_turu = 'satis' AND
                    YEAR(fatura_tarihi) = $year AND
                    MONTH(fatura_tarihi) = $month";
            
            error_log("DBProxy: Toplam Sorgusu: " . $total_query);
                    
            if ($this->isPDO) {
                $total_stmt = $this->db->prepare($total_query);
                $total_stmt->execute();
                $total = $total_stmt->fetch(PDO::FETCH_ASSOC);
            } else {
                $total_result_set = $this->db->query($total_query);
                
                if ($total_result_set) {
                    $total = $total_result_set->fetch_assoc();
                } else {
                    throw new Exception("MySQLi toplam sorgusu hatası: " . $this->db->error);
                }
            }
            
            error_log("DBProxy: Toplam " . count($results) . " günlük veri ve toplam özet bilgisi bulundu.");
            
            return [
                'success' => true,
                'data' => $results,
                'total' => $total,
                'query_type' => 'monthly_sales',
                'year' => $year,
                'month' => $month
            ];
        } catch (Exception $e) {
            error_log("DBProxy: Veritabanı hatası: " . $e->getMessage());
            return [
                'error' => 'Veritabanı hatası: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * Müşteri bilgileri
     */
    private function getCustomerInfo($params) {
        $limit = isset($params['limit']) ? (int)$params['limit'] : 10;
        $period = isset($params['period']) ? $params['period'] : 'all_time';
        
        error_log("DBProxy: getCustomerInfo çağrıldı. Limit: $limit, Period: $period");
        
        // Tarih filtresi
        $dateFilter = ($period != 'all_time') ? $this->getDateFilter('sf.fatura_tarihi', $period) : '';
        
        // Sorgu
        $query = "
            SELECT 
                m.id,
                CONCAT(m.ad, ' ', m.soyad) AS musteri_adi,
                m.telefon,
                COUNT(sf.id) AS toplam_islem,
                SUM(sf.toplam_tutar) AS toplam_harcama
            FROM 
                musteriler m
            LEFT JOIN 
                satis_faturalari sf ON m.id = sf.musteri_id
            WHERE 
                m.durum = 'aktif' AND
                sf.islem_turu = 'satis'" . $dateFilter . "
            GROUP BY 
                m.id
            ORDER BY 
                toplam_harcama DESC
            LIMIT " . $limit;
        
        error_log("DBProxy: SQL Sorgusu: " . $query);
        
        // Sorguyu çalıştır
        try {
            if ($this->isPDO) {
                $stmt = $this->db->prepare($query);
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
            } else {
                $result = $this->db->query($query);
                $results = [];
                
                if ($result) {
                    while ($row = $result->fetch_assoc()) {
                        $results[] = $row;
                    }
                } else {
                    throw new Exception("MySQLi sorgu hatası: " . $this->db->error);
                }
            }
            
            // Toplam müşteri sayısını al
            $total_query = "SELECT COUNT(*) AS toplam_musteri FROM musteriler WHERE durum = 'aktif'";
            
            error_log("DBProxy: Toplam Müşteri Sorgusu: " . $total_query);
            
            if ($this->isPDO) {
                $total_stmt = $this->db->prepare($total_query);
                $total_stmt->execute();
                $total = $total_stmt->fetch(PDO::FETCH_ASSOC);
            } else {
                $total_result = $this->db->query($total_query);
                
                if ($total_result) {
                    $total = $total_result->fetch_assoc();
                } else {
                    throw new Exception("MySQLi toplam müşteri sorgusu hatası: " . $this->db->error);
                }
            }
            
            error_log("DBProxy: Toplam " . count($results) . " müşteri ve toplam " . ($total['toplam_musteri'] ?? 0) . " aktif müşteri bulundu.");
            
            return [
                'success' => true,
                'data' => $results,
                'total_customers' => $total['toplam_musteri'],
                'query_type' => 'customer_info',
                'period' => $period
            ];
        } catch (Exception $e) {
            error_log("DBProxy: Veritabanı hatası: " . $e->getMessage());
            return [
                'error' => 'Veritabanı hatası: ' . $e->getMessage()
            ];
        }
    }
    
    /**
     * Dönem için SQL tarih filtresi oluştur
     */
    private function getDateFilter($field, $period) {
        $now = date('Y-m-d');
        
        switch ($period) {
            case 'today':
                return " AND DATE($field) = '$now'";
                
            case 'yesterday':
                $yesterday = date('Y-m-d', strtotime('-1 day'));
                return " AND DATE($field) = '$yesterday'";
                
            case 'this_week':
                return " AND YEARWEEK($field, 1) = YEARWEEK(NOW(), 1)";
                
            case 'last_week':
                return " AND YEARWEEK($field, 1) = YEARWEEK(DATE_SUB(NOW(), INTERVAL 1 WEEK), 1)";
                
            case 'this_month':
                $current_year = date('Y');
                $current_month = date('m');
                return " AND YEAR($field) = $current_year AND MONTH($field) = $current_month";
                
            case 'last_month':
                $last_month = date('Y-m-d', strtotime('first day of last month'));
                $year = date('Y', strtotime($last_month));
                $month = date('m', strtotime($last_month));
                return " AND YEAR($field) = $year AND MONTH($field) = $month";
                
            case 'this_year':
                $current_year = date('Y');
                return " AND YEAR($field) = $current_year";
                
            case 'last_year':
                $last_year = date('Y') - 1;
                return " AND YEAR($field) = $last_year";
                
            default:
                // Özel ay (format: month_YYYY_MM)
                if (preg_match('/^month_(\d{4})_(\d{2})$/', $period, $matches)) {
                    $year = $matches[1];
                    $month = $matches[2];
                    return " AND YEAR($field) = $year AND MONTH($field) = $month";
                }
                
                return "";
        }
    }
    
    /**
     * Veritabanı ve tablo varlığını kontrol et
     */
    public function checkDatabaseStructure() {
        try {
            if (!$this->db) {
                return [
                    'success' => false,
                    'error' => 'Veritabanı bağlantısı yok'
                ];
            }
            
            $tables = [];
            
            if ($this->isPDO) {
                $stmt = $this->db->prepare("SHOW TABLES");
                $stmt->execute();
                while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
                    $tables[] = $row[0];
                }
            } else {
                $result = $this->db->query("SHOW TABLES");
                if ($result) {
                    while ($row = $result->fetch_row()) {
                        $tables[] = $row[0];
                    }
                } else {
                    throw new Exception("MySQLi sorgu hatası: " . $this->db->error);
                }
            }
            
            // Gerekli tabloları kontrol et
            $requiredTables = [
                'urun_stok',
                'satis_faturalari',
                'satis_fatura_detay',
                'personel',
                'musteriler',
                'stok_hareketleri'
            ];
            
            $missingTables = array_diff($requiredTables, $tables);
            
            return [
                'success' => true,
                'tables' => $tables,
                'required_tables' => $requiredTables,
                'missing_tables' => $missingTables,
                'all_required_present' => count($missingTables) === 0
            ];
        } catch (Exception $e) {
            return [
                'success' => false,
                'error' => 'Veritabanı yapısı kontrolü sırasında hata: ' . $e->getMessage()
            ];
        }
    }
}

// Direkt API olarak kullanıldığında
if (basename(__FILE__) == basename($_SERVER['SCRIPT_NAME'])) {
    header('Content-Type: application/json; charset=utf-8');
    
    try {
        // Yetkilendirme kontrolü - güvenlik için oturum gerekli
        session_start();
        if (!isset($_SESSION['admin_logged_in']) && !isset($_SESSION['personel_logged_in'])) {
            throw new Exception('Bu API için yetkilendirme gerekli');
        }
        
        // POST verisini al
        $data = json_decode(file_get_contents('php://input'), true);
        
        // Parametreler
        $query_type = isset($data['query_type']) ? $data['query_type'] : null;
        $params = isset($data['params']) ? $data['params'] : [];
        
        if (!$query_type) {
            throw new Exception('Sorgu türü belirtilmemiş');
        }
        
        // DB Proxy'yi başlat
        global $conn;
        $db_proxy = new DBProxy($conn);
        
        // Sorguyu çalıştır
        $result = $db_proxy->executeQuery($query_type, $params);
        
        // Yanıtı döndür
        echo json_encode($result);
        
    } catch (Exception $e) {
        http_response_code(500);
        echo json_encode([
            'error' => $e->getMessage()
        ]);
    }
}