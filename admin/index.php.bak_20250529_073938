<?php
require_once 'db_connection.php'; // Veritabanı bağlantısı dosyanız
require_once 'session_manager.php'; // Güvenli session yönetim fonksiyonları
require_once 'netgsm_helper.php'; // NetGSM veritabanı yardımcı sınıfı

// Güvenli oturum başlatma
session_start();

// Oturum aktif mi kontrol et
if (isset($_SESSION['logged_in']) && $_SESSION['logged_in'] && isset($_SESSION['sms_verified']) && $_SESSION['sms_verified']) {
    // Session süresini kontrol et (12 saat)
    if (isset($_SESSION['login_time']) && (time() - $_SESSION['login_time'] <= SESSION_LIFETIME)) {
        // Session hala geçerli, dashboard'a yönlendir
        header("Location: admin_dashboard.php");
        exit;
    } else {
        // Oturum süresi dolmuş, çıkış yap
        logout();
    }
}

$message = '';
$messageType = 'error'; // Varsayılan mesaj tipi
$disableForm = false;

// IP ban kontrolü
$ipBanInfo = checkIPBanned($conn, $_SERVER['REMOTE_ADDR']);
if ($ipBanInfo) {
    // IP yasaklı, kalan süreyi hesapla
    $banBitis = new DateTime($ipBanInfo['ban_bitis']);
    $now = new DateTime();
    $kalanSure = $now->diff($banBitis);
    
    $message = "Güvenlik nedeniyle giriş engellenmiştir. Kalan süre: ";
    if ($kalanSure->d > 0) {
        $message .= $kalanSure->d . " gün ";
    }
    if ($kalanSure->h > 0) {
        $message .= $kalanSure->h . " saat ";
    }
    $message .= $kalanSure->i . " dakika.";
    $disableForm = true;
}

// Hatalı giriş denemeleri için oturum değişkenlerini başlatma
if (!isset($_SESSION['login_attempts'])) {
    $_SESSION['login_attempts'] = 0;
}

// Oturum engelleme süresi kontrolü
if (isset($_SESSION['block_time']) && !$disableForm) {
    $timePassed = time() - $_SESSION['block_time'];
    if ($timePassed < 3600) { // 3600 saniye = 60 dakika
        $remainingTime = 3600 - $timePassed;
        $message = "Henüz giriş yapamazsınız. Kalan süre: " . ceil($remainingTime / 60) . " dakika.";
        $disableForm = true; // Formu devre dışı bırak
    } else {
        unset($_SESSION['block_time']);
        unset($_SESSION['login_attempts']);
    }
}

// Giriş yapma işlemi
if ($_SERVER['REQUEST_METHOD'] == 'POST' && !$disableForm) {
    // CSRF token kontrolü
    if (!isset($_POST['csrf_token']) || !verify_csrf_token($_POST['csrf_token'])) {
        $message = "Güvenlik doğrulaması başarısız. Lütfen sayfayı yenileyip tekrar deneyin.";
    } else {
        // XSS koruması için girdileri temizle
        $username = htmlspecialchars(trim($_POST['username']), ENT_QUOTES, 'UTF-8');
        $password = $_POST['password']; // Şifreyi filtreleme, hash için orijinal hali gerekli
        
        // Boş değer kontrolü
        if (empty($username) || empty($password)) {
            $message = "Kullanıcı adı ve şifre gereklidir.";
        } else {
            try {
                // Son 10 dakika içinde 5'ten fazla başarısız deneme varsa engelle
                $failedAttempts = countFailedLoginAttempts($conn, $_SERVER['REMOTE_ADDR'], 10);
                if ($failedAttempts >= 5) {
                    // IP adresini 60 dakika boyunca yasakla
                    banIP($conn, $_SERVER['REMOTE_ADDR'], $username, 60);
                    $message = "Çok fazla başarısız giriş denemesi. Lütfen 60 dakika bekleyiniz.";
                    $disableForm = true;
                } else {
                    // Kullanıcı adı ve şifre kontrolü
                    $query = "SELECT * FROM admin_user WHERE kullanici_adi = :kullanici_adi LIMIT 1";
                    $stmt = $conn->prepare($query);
                    $stmt->bindParam(':kullanici_adi', $username, PDO::PARAM_STR);
                    $stmt->execute();
                    $result = $stmt->fetch(PDO::FETCH_ASSOC);
                    
                    if ($result) {
                        $user = $result;
                        if (password_verify($password, $user['sifre'])) {
                            // Başarılı giriş denemesini logla
                            logLoginAttempt($conn, $user['id'], $username, 'admin', true, 'Başarılı giriş');
                            logUserActivity($conn, $user['id'], 'admin', 'giris', 'Başarılı giriş');
                            
                            // Giriş başarılı - güvenli oturum açma
                            loginUser($user['id'], $username);
                            
                            // SMS kontrolü yapılacak mı? Son 24 saatte doğrulama yapılmış mı?
                            $needSmsVerification = true;
                            
                            if (isset($_SESSION['sms_verified']) && $_SESSION['sms_verified'] && 
                                isset($_SESSION['last_sms_verification']) && 
                                (time() - $_SESSION['last_sms_verification'] < 86400)) {
                                // Son 24 saat içinde SMS doğrulaması yapılmış
                                $needSmsVerification = false;
                            }
                            
                            if ($needSmsVerification) {
                                // SMS doğrulaması gerekiyor
                                $phone = $user['telefon_no']; // Kullanıcı telefon numarası
                                $verificationCode = rand(100000, 999999); // 6 haneli doğrulama kodu
                                
                                // Telefon numarası formatını düzenle
                                $phone = preg_replace('/[^0-9]/', '', $phone); // Sadece rakamları al
                                
                                // Eğer başında 0 varsa kaldır
                                if (substr($phone, 0, 1) == '0') {
                                    $phone = substr($phone, 1);
                                }
                                
                                // Eğer başında ülke kodu yoksa ekle
                                if (substr($phone, 0, 2) != '90') {
                                    $phone = '90' . $phone;
                                }
                                
                                // Doğrulama kodunu şifreleyerek session'a kaydet
                                $_SESSION['verification_code'] = encrypt_sensitive_data((string)$verificationCode);
                                
                                // Önemli: verify.php'de SMS gönderilmesini sağlamak için sms_sent bayrağını temizle
                                unset($_SESSION['sms_sent']);
                                
                                // Kullanıcı telefon numarasını şifreleyerek session'a kaydet
                                $_SESSION['phone'] = encrypt_sensitive_data($phone);
                                
                                // SMS doğrulama log tablosuna kayıt ekle
                                try {
                                    $stmt = $conn->prepare("
                                        INSERT INTO sms_dogrulama_log 
                                        (kullanici_id, kullanici_tipi, telefon, dogrulama_kodu, ip_adresi) 
                                        VALUES (?, ?, ?, ?, ?)
                                    ");
                                    
                                    $stmt->execute([
                                        $user['id'],
                                        'admin',
                                        $phone,
                                        $verificationCode,
                                        $_SERVER['REMOTE_ADDR'] ?? 'unknown'
                                    ]);
                                } catch (PDOException $e) {
                                    error_log("SMS doğrulama log kaydı oluşturulurken hata: " . $e->getMessage());
                                }
                                
                                // Yönlendirme
                                header("Location: verify.php");
                                exit;
                            } else {
                                // SMS doğrulamasına gerek yok, direkt dashboard'a yönlendir
                                header("Location: admin_dashboard.php");
                                exit;
                            }
                        } else {
                            // Başarısız giriş denemesini logla
                            logLoginAttempt($conn, $user['id'], $username, 'admin', false, 'Hatalı şifre');
                            logUserActivity($conn, $user['id'], 'admin', 'basarisiz', 'Hatalı şifre');
                            
                            // Yanlış şifre
                            $_SESSION['login_attempts']++;
                            $message = "Kullanıcı adı veya şifre hatalı.";
                            
                            if ($_SESSION['login_attempts'] >= 3) {
                                $message = "3 kez hatalı giriş yaptınız. Lütfen 60 dakika bekleyin.";
                                // Kullanıcının giriş yapmasını 60 dakika boyunca engelleme
                                $_SESSION['block_time'] = time();
                            }
                        }
                    } else {
                        // Başarısız giriş denemesini logla (kullanıcı bulunamadı)
                        logLoginAttempt($conn, 0, $username, 'admin', false, 'Kullanıcı bulunamadı');
                        
                        // Kullanıcı bulunamadı
                        $_SESSION['login_attempts']++;
                        $message = "Kullanıcı adı veya şifre hatalı.";
                        
                        if ($_SESSION['login_attempts'] >= 3) {
                            $message = "3 kez hatalı giriş yaptınız. Lütfen 60 dakika bekleyin.";
                            $_SESSION['block_time'] = time();
                        }
                    }
                }
            } catch (PDOException $e) {
                // Hata durumu
                $message = "Veritabanı hatası oluştu. Lütfen daha sonra tekrar deneyin.";
                error_log("Login error: " . $e->getMessage());
            }
        }
    }
}

// CSRF token oluştur
$csrf_token = generate_csrf_token();
?>

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com; style-src 'self' https://cdnjs.cloudflare.com 'unsafe-inline'; font-src 'self' https://cdnjs.cloudflare.com; img-src 'self' data:;">
    <title>POS Sistemi - Admin Giriş</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body class="login-page">
    <div class="login-wrapper">
        <div class="login-container">
            <div class="login-header">
                <div class="login-logo">
                    <i class="fas fa-cash-register"></i>
                </div>
                <h1 class="login-title">İnciPOS</h1>
                <p class="login-subtitle">Yönetim Paneli Girişi</p>
            </div>
            
            <?php if ($message): ?>
                <div class="login-message <?php echo $messageType === 'success' ? 'success-message' : 'error-message'; ?>">
                    <i class="fas <?php echo $messageType === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'; ?>"></i> <?php echo htmlspecialchars($message); ?>
                </div>
            <?php endif; ?>
            
            <form method="POST" action="index.php" class="login-form" autocomplete="off">
                <!-- CSRF token -->
                <input type="hidden" name="csrf_token" value="<?php echo $csrf_token; ?>">
                
                <div class="form-group">
                    <label for="username"><i class="fas fa-user"></i> Kullanıcı Adı</label>
                    <input type="text" name="username" id="username" class="login-input" required>
                </div>
                <div class="form-group">
                    <label for="password"><i class="fas fa-lock"></i> Şifre</label>
                    <input type="password" name="password" id="password" class="login-input" required>
                </div>
                <button type="submit" class="login-button" <?php echo $disableForm ? 'disabled' : ''; ?>>
                    <i class="fas fa-sign-in-alt"></i> GİRİŞ YAP
                </button>
            </form>
            
            <div class="login-footer">
                <p>© <?php echo date('Y'); ?> İnciPOS - Tüm Hakları Saklıdır</p>
            </div>
        </div>
    </div>
    
    <script>
    // Otomatik odaklanma
    document.addEventListener('DOMContentLoaded', function() {
        const usernameInput = document.getElementById('username');
        if (usernameInput) {
            usernameInput.focus();
        }
        
        // Form engellendiğinde butonları devre dışı bırak
        if (<?php echo $disableForm ? 'true' : 'false'; ?>) {
            const buttons = document.querySelectorAll('button[type="submit"]');
            buttons.forEach(function(button) {
                button.disabled = true;
                button.classList.add('disabled');
            });
            
            const inputs = document.querySelectorAll('input');
            inputs.forEach(function(input) {
                input.disabled = true;
            });
        }
    });
    </script>
</body>
</html>